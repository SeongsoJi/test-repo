이 프로그램은 UDP를 이용한 DNS 프록시 서버야. 클라이언트로부터 DNS 요청을 받으면:
정상적인 도메인이면 → 그냥 Google DNS (혹은 Cloudflare DNS)에 질의하고, 그 응답을 그대로 전달
없는 도메인이면 (NXDOMAIN) → 응답을 내가 지정한 가짜 IP로 바꿔서 클라이언트에게 전달

import socket
import sys

class DNSProxy: # 프록시 서버 기능을 담당
    def __init__(self, listen_host='0.0.0.0', listen_port=1053, upstream_dns=('1.1.1.1', 53), fake_ip='203.0.113.1'):
        self.listen_host = listen_host
        self.listen_port = listen_port
        self.upstream_dns = upstream_dns
        self.fake_ip = fake_ip
        self.buffer_size = 512
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

생성자 함수 (객체가 처음 만들어질 때 실행)
listen_host='0.0.0.0': 모든 인터페이스에서 요청 수신
listen_port=1053: DNS는 보통 53번 포트를 사용하지만, 여기선 1053 사용
upstream_dns=('1.1.1.1', 53): 실제 DNS 서버 주소 (Cloudflare DNS)
fake_ip='203.0.113.1': 없는 도메인 요청 시, 이 IP를 가짜로 돌려줌


    def start(self):
        try:
            self.server_socket.bind((self.listen_host, self.listen_port))
            print(f"DNS 프록시가 {self.listen_host}:{self.listen_port}에서 수신 대기 중입니다")
            소켓을 바인딩하고 실행함. 모든 IP에서 1053번 포트로 요청을 받을 준비함.

            while True:
                data, client_addr = self.server_socket.recvfrom(self.buffer_size)
                print(f"{client_addr}로부터 DNS 요청을 받았습니다")
                클라이언트로부터 DNS 요청 받음 (data), client_addr: (IP, 포트) 튜플
                
                self.server_socket.sendto(data, self.upstream_dns)
                response, _ = self.server_socket.recvfrom(self.buffer_size) # 응답 데이터는 response에 저장하고, 보낸 주소는 필요 없으니 그냥 _로 버린다
                # 받은 요청을 Cloudflare DNS(1.1.1.1) 에 그대로 전달하고, 거기서 온 응답을 받음
                
                if self.is_nxdomain(response):
                    print("NXDOMAIN(도메인 없음) 응답 감지됨 → 조작된 응답을 전송합니다")
                    response = self.craft_fake_response(data)
                    # 응답이 NXDOMAIN인지 확인 (존재하지 않는 도메인), 맞다면 가짜 IP 주소를 포함한 DNS 응답으로 바꿈
                self.server_socket.sendto(response, client_addr)
                print(f"{client_addr}에게 응답을 전송했습니다") # 수정되었든 안 되었든, 클라이언트에게 응답 전송

        except KeyboardInterrupt: # Ctrl+C 누르면 서버 종료, 소켓 닫기
            print("DNS 프록시를 종료합니다.")
        finally:
            self.server_socket.close()

    def is_nxdomain(self, data):
        flags_low = data[3] # data[3] = 0b10000011 = 0x83 
        rcode = flags_low & 0x0F    # rcode = 0x83 & 0x0F = 0x03 = 3
        ancount = int.from_bytes(data[6:8], 'big')  # 응답 answer count, data[6:8] = b'\x00\x00
        return rcode == 3 and ancount == 0

    def craft_fake_response(self, query_data):
        transaction_id = query_data[0:2]
        flags = bytes([0x81, 0x80])  # QR=1, Opcode=0, AA=1, TC=0, RD=1, RA=1, RCODE=0
        qdcount = bytes([0x00, 0x01])
        ancount = bytes([0x00, 0x01])
        nscount = bytes([0x00, 0x00])
        arcount = bytes([0x00, 0x00])
        
        header = transaction_id + flags + qdcount + ancount + nscount + arcount
        question = query_data[12:]

        name_pointer = bytes([0xC0, 0x0C])  # 질문 이름 포인터
        type_a = bytes([0x00, 0x01])  # Type A
        class_in = bytes([0x00, 0x01])  # Class IN
        ttl = bytes([0x00, 0x00, 0x01, 0x2C])  # 300초 = 0x012C
        rdlength = bytes([0x00, 0x04])  # IPv4 길이

        ip_parts = [int(x) for x in self.fake_ip.split('.')]
        rdata = bytes(ip_parts)

        answer = name_pointer + type_a + class_in + ttl + rdlength + rdata
        return header + question + answer

if __name__ == "__main__":
    proxy = DNSProxy(fake_ip='203.0.113.1')
    proxy.start()
